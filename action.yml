name: 'Generate Coverage Table'
description: 'Parses Cobertura XML and creates a Markdown summary with thresholds.'
author: 'Daniel Acevedo'
inputs:
  filename:
    description: 'Path to the Cobertura XML file'
    required: true
  threshold:
    description: 'Coverage threshold (e.g., 90 means 90%)'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Generate Markdown table from Cobertura XML
      shell: bash
      run: |
        python3 <<EOF
        import xml.etree.ElementTree as ET
        import os
        import sys

        filename = "${{ inputs.filename }}"
        threshold = float("${{ inputs.threshold }}")

        if not os.path.isfile(filename):
            raise FileNotFoundError(f"File not found: {filename}")

        tree = ET.parse(filename)
        root = tree.getroot()

        table = f"| Assembly        | Line Coverage | Branch Coverage | Health (over {threshold}%) |\n"
        table += "|----------------|----------------------|--------------------------|------------------------|\n"

        all_pass = True
        total_lines_covered = total_lines_valid = 0
        total_branches_covered = total_branches_valid = 0

        for package in root.findall("packages/package"):
            name = package.attrib["name"]
            lines_covered = int(package.attrib.get("lines-covered", 0))
            lines_valid = int(package.attrib.get("lines-valid", 0))
            branches_covered = int(package.attrib.get("branches-covered", 0))
            branches_valid = int(package.attrib.get("branches-valid", 0))

            line_rate = (lines_covered / lines_valid * 100) if lines_valid else 0.0
            branch_rate = (branches_covered / branches_valid * 100) if branches_valid else 0.0

            total_lines_covered += lines_covered
            total_lines_valid += lines_valid
            total_branches_covered += branches_covered
            total_branches_valid += branches_valid

            passed = "✅" if line_rate >= threshold and branch_rate >= threshold else "❌"
            if passed == "❌":
                all_pass = False

            table += f"| {name:<15} | {line_rate:>5.2f}% ({lines_covered}/{lines_valid}) | {branch_rate:>5.2f}% ({branches_covered}/{branches_valid}) | {passed} |\n"

        total_line_rate = (total_lines_covered / total_lines_valid * 100) if total_lines_valid else 0.0
        total_branch_rate = (total_branches_covered / total_branches_valid * 100) if total_branches_valid else 0.0
        summary_pass = "✅" if total_line_rate >= threshold and total_branch_rate >= threshold else "❌"

        table += "|----------------|----------------------|--------------------------|------------------------|\n"
        table += f"| **Summary**     | **{total_line_rate:>5.2f}% ({total_lines_covered}/{total_lines_valid})** | **{total_branch_rate:>5.2f}% ({total_branches_covered}/{total_branches_valid})** | {summary_pass} |\n"

        with open("coverage-table.md", "w") as f:
            f.write(table)

        print("\n" + table)

        if not all_pass:
            print(f"❌ Coverage threshold of {threshold}% not met by all projects.")
            sys.exit(1)
        else:
            print(f"✅ All projects passed the {threshold}% threshold.")
        EOF
