on:
  workflow_call:
    inputs:
      solution-path:
        type: string
        description: 'The relative path to the .sln file (default: current directory)'
        required: false
        default: '.'
      solution-name:
        type: string
        description: 'The name of the solution file (e.g., MyApp.sln)'
        required: true
      report-coverage-title:
        type: string
        description: 'A title for the coverage report (default: Reporte de Cobertura)'
        required: false
        default: 'Reporte de Cobertura'

env:
  DOTNET_VERSION: '8.0.x' # The .NET SDK version to use
  FULL_SOLUTION_PATH: ${{ inputs.solution-path }}/${{ inputs.solution-name }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: "!contains(github.event.pull_request.labels.*.name, 'Blocked: Build Fix Required')"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore ${{ env.FULL_SOLUTION_PATH }}

      - name: Run build
        run: dotnet build ${{ env.FULL_SOLUTION_PATH }} --configuration Release

  test:
    name: Test
    permissions: write-all
    needs: build
    runs-on: ubuntu-latest
    if: "!contains(github.event.pull_request.labels.*.name, 'Blocked: Tests Fix Required')"
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Build in Release
        run: dotnet build ${{ env.FULL_SOLUTION_PATH }} --configuration Release

      - name: Generate Results and Coverage Reports
        run: dotnet test ${{ env.FULL_SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --logger "trx;LogFilePrefix=test-results" --results-directory ./test-results --collect:"XPlat Code Coverage" --settings .runsettings

      - name: Uploaded Results Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Uploaded Results Report
          path: ${{ inputs.solution-path }}/test-results/test-results*
          reporter: dotnet-trx
          path-replace-backslashes: false
          list-suites: all
          list-tests: all
          max-annotations: 10
          fail-on-error: true
          fail-on-empty: true
          only-summary: false

      - name: Remove Runner Folder
        run: find ./test-results -type d -name "*_*_*" -exec rm -rf {} +

      - name: Join Coverage Reports
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.9
        with:
          reports: ${{ inputs.solution-path }}/test-results/**/coverage.cobertura.xml
          targetdir: coverage-report
          reporttypes: 'Html;Cobertura'
          verbosity: 'Verbose'
          tag: '${{ github.run_number }}_${{ github.run_id }}'
          title: '${{ inputs.report-coverage-title }}'

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Coverage Report       
          path: coverage-report

      - name: Check Coverage
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage-report/Cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '85 90'

      - name: Add Coverage as PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' && always()
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Write to Job Summary
        if: always()
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
          git tag --annotate "$BUMPED" --message "via GitHub Actions"
          git push origin "$BUMPED"

      # üõë Add "Blocked: Fix Required" label if tests fail
      - name: Block PR if Tests Fail
        if: failure() && github.event_name == 'pull_request'
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels \
            -d '{"labels":["Blocked: Tests Fix Required"]}'

      # üìù Comment on PR when blocked
      - name: Comment on PR if Tests Fail
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' && failure()
        with:
          recreate: true
          message: |
            ‚ùå The tests failed. The PR has been marked as **Blocked: Fix Required**. Please fix the issues before pushing again.
            
      # - name: Comment on PR if Tests Fail
      #   if: failure() && github.event_name == 'pull_request'
      #   run: |
      #     PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
      #     COMMENT_BODY="‚ùå The tests failed. The PR has been marked as **Blocked: Fix Required**. Please fix the issues before pushing again."

      #     curl -X POST \
      #       -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #       -H "Accept: application/vnd.github.v3+json" \
      #       https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
      #       -d "{\"body\": \"$COMMENT_BODY\"}"
